
# Full build and test
name: Arktos-Build
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest] #[ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          #- os: macos-latest
          #  triplet: x64-osx
    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_SOURCE_DIR: ${{ github.workspace }}/
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash
        
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: Get SDL from package manager
        run: |
          sudo apt install libsdl2-dev
        shell: bash
        if: matrix.os == 'ubuntu-latest'
      
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Generate project files
        run: |
          cmake build -S "${{ env.CMAKE_SOURCE_DIR }}" -B "${{ env.CMAKE_BUILD_DIR }}"
          

      # Build the whole project.
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config Debug
      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash
        
      - name: Test
        working-directory: ./build
        run: |
            ctest -C Debug --verbose
        shell: bash
        
        
        
